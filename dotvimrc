""""""""""""""""""""""""""""""
" Vim Profile using Pathogen "
" Author: Chris Tompkinson   "
""""""""""""""""""""""""""""""

"" Init

" Pathogen
call pathogen#infect()
call pathogen#helptags()

" Setup vim basics
syntax enable
set nocompatible
let &t_Co=256
filetype plugin on
filetype indent on

" Ignore case
set ic

" Enable line numbering
set number

" Setup relative line numbers
set relativenumber
nnoremap <Leader>rn :set relativenumber!<CR>

" Disable highlighted search results
set nohlsearch

" Ignore case
set ic

" Color scheme
set background=dark
colorscheme hybrid
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_ruby_checkers = ['rubocop', 'mri']

hi IndentGuidesOdd  ctermbg=black
hi IndentGuidesEven ctermbg=darkgrey

" Useful :list output
set listchars=eol:⏎,tab:►·,trail:␠,nbsp:⎵

" Airline setup
set laststatus=2
let g:airline_right_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_left_alt_sep= ''
let g:airline_left_sep = ''
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1
set statusline+=%#warningmsg#
set statusline+=%{ALEGetStatusLine()}
set statusline+=%*
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']

" Setup linters
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_ruby_checkers = ['rubocop', 'mri']
let g:vim_json_syntax_conceal = 0

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

autocmd FileType ruby let &l:tags = pathogen#legacyjoin(pathogen#uniq(
      \ pathogen#split(&tags) +
      \ map(split($GEM_PATH,':'),'v:val."/gems/*/tags"')))

let g:deoplete#enable_at_startup = 1
if !exists('g:deoplete#omni#input_patterns')
  let g:deoplete#omni#input_patterns = {}
endif


" Setup a cursorline
set cursorline

" Markdown hider
set conceallevel=2

" Set default spaces
set shiftwidth=2
set tabstop=2
set expandtab

" Add column to line 100
set colorcolumn=100
highlight ColorColumn ctermbg=8

" Splits always occur bottom right
set splitbelow
set splitright

com! FormatJSON %!python -m json.tool


" Close when finished
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

" deoplete tab-complete
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

" Easy Tags
set tags=./tags;
let g:easytags_dynamic_files = 1

"" Bindings

" Enable list mode
nnoremap <Leader>L :set list!<CR>
" Run indent on buffer
nnoremap <Leader>i gg=G''
" Toggle Gundo
nnoremap <Leader>u :MundoToggle<CR>
" Toggle paste mode
nnoremap <Leader>p :set paste!<CR>
" Re-source vim profile
nnoremap <Leader>r :source ~/.config/nvim/init.vim<CR>
" Toggle line numbers
nnoremap <Leader>N :set nu!<CR>
" Toggle NERDTree file browser
nnoremap <Leader>nt :NERDTreeToggle<CR>
" Toggle NERDTree file browser 2
nnoremap <Leader>] :NERDTreeToggle<CR>
" New Tab
nnoremap <Leader>tn :tabnew<CR>
" New veritcal split pane with empty buffer
nnoremap <Leader>v :vnew<CR>
" New horizontal split pane with empty buffer
nnoremap <Leader>V :new<CR>
" Quit
nnoremap <Leader>q :q<CR>
" Force quit
nnoremap <Leader>Q :q!<CR>
" Write
nnoremap <Leader>w :w<CR>
" Force write
nnoremap <Leader>W :w!<CR>
" Replace tabs with four spaces
nnoremap <Leader>ct :%s/	/    /g<CR>
" Toggle tag list
nnoremap <Leader>lt :TlistToggle<CR>
" Run yaml-lint on buffer
nnoremap <Leader>yl :Shell yaml-lint %<CR>
" Open file fuzzy matcher
nnoremap <Leader>f :CtrlP<CR>
" Open buffer matcher
nnoremap <Leader>b :CtrlPBuffer<CR>
" Start force edit command
nnoremap <Leader>e :SyntasticCheck<CR>:Errors<CR>
" Toggle Cursor line
nnoremap <Leader>ch :set cursorline!<CR>
" Run shell and output in new pane
" ! Space at end of line is intentional
nnoremap <Leader>! :Shell
" Toggle Line Wrapping
nnoremap <Leader>lw :set wrap!<CR>
"Terminal
nnoremap <Leader>T :terminal<CR>

" Sessions
nnoremap <Leader>ss :mksession ~/.default_session.vim<CR>
nnoremap <Leader>ls :source ~/.default_session.vim<CR>

" Titles
" Create commented title
nnoremap <Leader>tt :set paste<CR>^i# <Esc>O<Esc>79i#<Esc>jo#<Esc>:set paste!<CR>
" Create bold commented title
nnoremap <Leader>tb ^i# <Esc>$a #<Esc>yyPpkVr#jjVr#
" Create underline
nnoremap <Leader>tu yyPjVr-
" Create Markdown titles
nnoremap <Leader>t1 ^i# <Esc>$
nnoremap <Leader>t2 ^i## <Esc>$
nnoremap <Leader>t3 ^i### <Esc>$

" Allow easy pane switching with ctrl direction
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Terminal binds
tnoremap <Esc> <C-\><C-n>
tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l

" Hack to allow Ctrl movement on OS X
nmap <BS> <C-W>h

" Quick pane resizing
nnoremap <Leader>z :vertical resize -10<CR>
nnoremap <Leader>x :vertical resize +10<CR>
nnoremap <Leader>Z :resize -5<CR>
nnoremap <Leader>X :resize +5<CR>

" Open a term
nnoremap <Leader>T :terminal<CR>

" Open quick file view
nnoremap <Leader>F :Ntree<CR>

" CTags
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" ROT13
map <Leader>R ggg?G``

" Get paste
nnoremap <Leader>' "+

" Vim Fugitive
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gpu :Gpush<CR>
nnoremap <Leader>gpl :Gpull<CR>
nnoremap <Leader>gb :Gblame<CR>

"" Functions

" Run shell command and output in a new pane
function! s:ExecuteInShell(command) " {{{
    let command = join(map(split(a:command), 'expand(v:val)'))
    let winnr = bufwinnr('^' . command . '$')
    silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
    setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap nonumber
    echo 'Execute ' . command . '...'
    silent! execute 'silent %!'. command
    silent! redraw
    silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
    silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>:AnsiEsc<CR>'
    silent! execute 'nnoremap <silent> <buffer> q :q<CR>'
    silent! execute 'AnsiEsc'
    echo 'Shell command ' . command . ' executed.'
endfunction " }}}
command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)
